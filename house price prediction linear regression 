import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import os

print("Current working directory:", os.getcwd())
print("Files in directory:", os.listdir('.'))

try:
    data = pd.read_csv('housing.csv')
    print("File found and loaded successfully!")
except FileNotFoundError:
    print("housing.csv not found. Trying different paths...")
    try:
        data = pd.read_csv('./housing.csv')
    except FileNotFoundError:
        print("Please make sure housing.csv is in the same folder as this Python file")
        exit()

print("Dataset loaded:")
print(data.head())
print(f"Total houses: {len(data)}")

data = data[['median_income', 'total_rooms', 'median_house_value']].dropna()
data.columns = ['income', 'rooms', 'price']

data = data.head(200)

print(f"\nUsing first 200 houses:")
print(data.head())

plt.figure(figsize=(15, 6))

plt.subplot(1, 2, 1)
plt.scatter(data['income'], data['price'], alpha=0.7, s=50)
plt.xlabel('Median Income')
plt.ylabel('House Price')
plt.title('Income vs Price')

plt.subplot(1, 2, 2)
plt.scatter(data['rooms'], data['price'], alpha=0.7, s=50)
plt.xlabel('Total Rooms')
plt.ylabel('House Price')
plt.title('Rooms vs Price')

plt.tight_layout()
plt.show()

X = data[['income', 'rooms']]
y = data['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining houses: {len(X_train)}")
print(f"Test houses: {len(X_test)}")

model = LinearRegression()
model.fit(X_train, y_train)

predictions = model.predict(X_test)

accuracy = model.score(X_test, y_test)

print(f"\nModel Performance:")
print(f"Accuracy: {accuracy:.3f}")

plt.figure(figsize=(10, 8))
plt.scatter(y_test, predictions, alpha=0.7, s=60)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', linewidth=2)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Prices')
plt.show()

print("\nSample predictions:")
for i in range(5):
    actual = y_test.iloc[i]
    predicted = predictions[i]
    income_val = X_test.iloc[i]['income']
    rooms_val = X_test.iloc[i]['rooms']
    print(f"Income: {income_val:.1f}, Rooms: {rooms_val:.0f} - Actual: ${actual:,.0f}, Predicted: ${predicted:,.0f}")

new_house = [[5.0, 6000]]
new_price = model.predict(new_house)
print(f"\nPredicted price for median income 5.0, 6000 rooms: ${new_price[0]:,.0f}")